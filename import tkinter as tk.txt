import tkinter as tk
from tkinter import messagebox
import math

def evaluate_expression(expression):
    try:
        return eval(expression)
    except Exception as e:
        return f"Error: {e}"

def calculate(event=None):
    expression = entry.get()
    try:
        result = evaluate_expression(expression)
        entry.delete(0, tk.END)
        entry.insert(0, str(result))
    except Exception:
        messagebox.showerror("Error", "Invalid Input")

def clear_entry():
    entry.delete(0, tk.END)

def append_to_entry(char):
    current_text = entry.get()
    entry.delete(0, tk.END)
    entry.insert(0, current_text + char)

def trigonometric_function(func):
    try:
        value = float(entry.get())
        radians = math.radians(value)
        if func == "sin":
            result = math.sin(radians)
        elif func == "cos":
            result = math.cos(radians)
        elif func == "tan":
            result = math.tan(radians)
        entry.delete(0, tk.END)
        entry.insert(0, str(result))
    except ValueError:
        messagebox.showerror("Error", "Enter a valid number.")

def logarithmic_function(base):
    try:
        value = float(entry.get())
        if base == "log":
            result = math.log10(value)
        elif base == "ln":
            result = math.log(value)
        entry.delete(0, tk.END)
        entry.insert(0, str(result))
    except ValueError:
        messagebox.showerror("Error", "Enter a valid number.")

def factorial():
    try:
        value = int(entry.get())
        if value < 0:
            raise ValueError("Factorial not defined for negative numbers.")
        result = math.factorial(value)
        entry.delete(0, tk.END)
        entry.insert(0, str(result))
    except ValueError:
        messagebox.showerror("Error", "Enter a valid non-negative integer.")

root = tk.Tk()
root.title("Enhanced Scientific Calculator")
root.geometry("400x600")

entry = tk.Entry(root, width=30, font=("Arial", 18), borderwidth=3, relief="ridge", justify="right")
entry.grid(row=0, column=0, columnspan=5, padx=20, pady=20)
entry.bind("<Return>", calculate)

buttons = [
    ("7", 1, 0), ("8", 1, 1), ("9", 1, 2), ("/", 1, 3), ("C", 1, 4),
    ("4", 2, 0), ("5", 2, 1), ("6", 2, 2), ("*", 2, 3), ("√", 2, 4),
    ("1", 3, 0), ("2", 3, 1), ("3", 3, 2), ("-", 3, 3), ("^", 3, 4),
    ("0", 4, 0), (".", 4, 1), ("=", 4, 2), ("+", 4, 3), ("!", 4, 4),
    ("sin", 5, 0), ("cos", 5, 1), ("tan", 5, 2), ("log", 5, 3), ("ln", 5, 4)
]

def create_button(text, row, col, command, width=5, height=2, color="lightblue"):
    return tk.Button(root, text=text, width=width, height=height, font=("Arial", 14), command=command, bg=color, relief="raised", bd=2)

for (text, row, col) in buttons:
    if text == "=":
        btn = create_button(text, row, col, calculate, color="lightgreen")
    elif text == "C":
        btn = create_button(text, row, col, clear_entry, color="salmon")
    elif text in {"sin", "cos", "tan"}:
        btn = create_button(text, row, col, lambda t=text: trigonometric_function(t), color="lightyellow")
    elif text in {"log", "ln"}:
        btn = create_button(text, row, col, lambda t=text: logarithmic_function(t), color="lightyellow")
    elif text == "!":
        btn = create_button(text, row, col, factorial, color="lightpink")
    elif text == "√":
        btn = create_button(text, row, col, lambda: append_to_entry("**0.5"), color="lightblue")
    elif text == "^":
        btn = create_button(text, row, col, lambda: append_to_entry("**"), color="lightblue")
    else:
        btn = create_button(text, row, col, lambda t=text: append_to_entry(t))
    btn.grid(row=row, column=col, padx=10, pady=10)

root.resizable(True, True)

root.mainloop()
